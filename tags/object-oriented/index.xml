<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Object-Oriented on AllThingsEmbedded</title><link>https://allthingsembedded.com/staging-web/tags/object-oriented/</link><description>Recent content in Object-Oriented on AllThingsEmbedded</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 02 Jan 2022 17:02:33 +0200</lastBuildDate><atom:link href="https://allthingsembedded.com/staging-web/tags/object-oriented/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Structures: Ditto::static_ptr&lt;Base, Derived, ...></title><link>https://allthingsembedded.com/staging-web/post/data_structure_static_pointer/</link><pubDate>Sun, 02 Jan 2022 17:02:33 +0200</pubDate><guid>https://allthingsembedded.com/staging-web/post/data_structure_static_pointer/</guid><description>One of the nice things about C++ compared to C is its ability to define reusable types and data structures. They make code reuse easier and also help with reasoning if the abstraction is high-level enough.
Today we are going to talk about static_ptr from the library Ditto. Dynamic allocation is often forbidden when developing embedded systems. This leads to allocating most things either in the stack or globally. A static_ptr allows the user to statically allocate an object of a derived class and access it as a base class pointer.</description></item><item><title>Bare Metal C++ Register Access API</title><link>https://allthingsembedded.com/staging-web/post/bare-metal-register-access-api/</link><pubDate>Sat, 25 Sep 2021 20:26:21 +0200</pubDate><guid>https://allthingsembedded.com/staging-web/post/bare-metal-register-access-api/</guid><description>Introduction to memory-mapping Note: This section is introductory material for those who are not yet familiar with the concept of memory-mapping. If you are already experienced with memory-mapping feel free to jump to the next section. Most likely you won&amp;rsquo;t miss anything new.
One of the most common ways of accessing peripherals from a CPU is memory-mapping. In short, this means that the address space of the CPU has some addresses that when accessed read/write peripheral&amp;rsquo;s registers.</description></item></channel></rss>