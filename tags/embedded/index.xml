<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Embedded on AllThingsEmbedded</title><link>https://allthingsembedded.com/staging-web/tags/embedded/</link><description>Recent content in Embedded on AllThingsEmbedded</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 03 Jan 2019 09:00:50 +0000</lastBuildDate><atom:link href="https://allthingsembedded.com/staging-web/tags/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>ARM Cortex-M Startup code (for C and C++)</title><link>https://allthingsembedded.com/staging-web/post/2019-01-03-arm-cortex-m-startup-code-for-c-and-c/</link><pubDate>Thu, 03 Jan 2019 09:00:50 +0000</pubDate><guid>https://allthingsembedded.com/staging-web/post/2019-01-03-arm-cortex-m-startup-code-for-c-and-c/</guid><description>When developing bare metal applications it is required to supply some functions that we normally take for granted when developing code for mainstream OS&amp;rsquo;s. Setting the startup code is not inherently difficult but beware: some of the nastiest bugs you will ever see on bare metal can come from the startup code.
What is actually needed to start the execution of the main function? Well, there are a few things that the C and C++ language specifications assume when starting a new program.</description></item><item><title>Cross-compiling for embedded devices</title><link>https://allthingsembedded.com/staging-web/2018/12/29/cross-compiling-for-embedded-devices/</link><pubDate>Sat, 29 Dec 2018 17:36:13 +0000</pubDate><guid>https://allthingsembedded.com/staging-web/2018/12/29/cross-compiling-for-embedded-devices/</guid><description>Developing code for embedded devices is somewhat different from code for mainstream computers. One of these differences is the development environment.
Most of the target microcontrollers or microprocessors won&amp;rsquo;t usually be suited for local development. Imagine trying to build your code on the target when the target is a simple 8-bit Microcontroller. First of all you would need a compiler for the target architecture on the target device and it would probably be extra slow and inconvenient.</description></item></channel></rss>