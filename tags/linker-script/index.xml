<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linker Script on AllThingsEmbedded</title><link>https://allthingsembedded.com/staging-web/tags/linker-script/</link><description>Recent content in Linker Script on AllThingsEmbedded</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 25 Sep 2021 20:26:21 +0200</lastBuildDate><atom:link href="https://allthingsembedded.com/staging-web/tags/linker-script/index.xml" rel="self" type="application/rss+xml"/><item><title>Bare Metal C++ Register Access API</title><link>https://allthingsembedded.com/staging-web/post/bare-metal-register-access-api/</link><pubDate>Sat, 25 Sep 2021 20:26:21 +0200</pubDate><guid>https://allthingsembedded.com/staging-web/post/bare-metal-register-access-api/</guid><description>Introduction to memory-mapping Note: This section is introductory material for those who are not yet familiar with the concept of memory-mapping. If you are already experienced with memory-mapping feel free to jump to the next section. Most likely you won&amp;rsquo;t miss anything new.
One of the most common ways of accessing peripherals from a CPU is memory-mapping. In short, this means that the address space of the CPU has some addresses that when accessed read/write peripheral&amp;rsquo;s registers.</description></item><item><title>Mastering the GNU linker script</title><link>https://allthingsembedded.com/staging-web/post/2020-04-11-mastering-the-gnu-linker-script/</link><pubDate>Sat, 11 Apr 2020 21:25:34 +0000</pubDate><guid>https://allthingsembedded.com/staging-web/post/2020-04-11-mastering-the-gnu-linker-script/</guid><description>Most people getting started with embedded development seem to find linker scripts just another piece of magic required to get up and running with their system. Even when they might already be familiar with memory-mapped peripherals and basic embedded concepts, the linker script and how it interacts with the GNU linker (ld) is still pretty mysterious.
Today we will go through the main functions of a linker script to try to shed some light onto their operation.</description></item><item><title>ARM Cortex-M Startup code (for C and C++)</title><link>https://allthingsembedded.com/staging-web/post/2019-01-03-arm-cortex-m-startup-code-for-c-and-c/</link><pubDate>Thu, 03 Jan 2019 09:00:50 +0000</pubDate><guid>https://allthingsembedded.com/staging-web/post/2019-01-03-arm-cortex-m-startup-code-for-c-and-c/</guid><description>When developing bare metal applications it is required to supply some functions that we normally take for granted when developing code for mainstream OS&amp;rsquo;s. Setting the startup code is not inherently difficult but beware: some of the nastiest bugs you will ever see on bare metal can come from the startup code.
What is actually needed to start the execution of the main function? Well, there are a few things that the C and C++ language specifications assume when starting a new program.</description></item></channel></rss>