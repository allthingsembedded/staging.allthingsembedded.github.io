<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binutils on AllThingsEmbedded</title><link>https://allthingsembedded.com/staging-web/tags/binutils/</link><description>Recent content in Binutils on AllThingsEmbedded</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 11 Apr 2020 21:25:34 +0000</lastBuildDate><atom:link href="https://allthingsembedded.com/staging-web/tags/binutils/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering the GNU linker script</title><link>https://allthingsembedded.com/staging-web/post/2020-04-11-mastering-the-gnu-linker-script/</link><pubDate>Sat, 11 Apr 2020 21:25:34 +0000</pubDate><guid>https://allthingsembedded.com/staging-web/post/2020-04-11-mastering-the-gnu-linker-script/</guid><description>Most people getting started with embedded development seem to find linker scripts just another piece of magic required to get up and running with their system. Even when they might already be familiar with memory-mapped peripherals and basic embedded concepts, the linker script and how it interacts with the GNU linker (ld) is still pretty mysterious.
Today we will go through the main functions of a linker script to try to shed some light onto their operation.</description></item></channel></rss>